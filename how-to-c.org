* How to C
* How to C

This is a development environment where only the paranoid can survive.

-- John Regehr [1]

* Scope

I assume you know the basics of C.

This talk is not exhaustive because there's tons of little fun things that are
hard to fit in a talk.

Also, if you use them, you're literally Satan and are either a cool person or an
extreme violator of the psychopath rule.

* Why does C continue to exist

Pointers are real. They’re what the hardware understands. Somebody has to deal
with them. You can’t just place a LISP book on top of an x86 chip and hope that
the hardware learns about lambda calculus by osmosis. Denying the existence of
pointers is like living in ancient Greece and denying the existence of Krackens
and then being confused about why none of your ships ever make it to Morocco, or
Ur-Morocco, or whatever Morocco was called back then. Pointers are like Krackens
— real, living things that must be dealt with so that polite society can exist.

-- James Mickens [2]

* When to use C

System Programming within a SMALL team where cohesion can be maintained.

* When not to use C

C is difficult to manage in the interface between components.
It has no tools to enforce or detect cohesion.

The bigger the project/team the more components you have.
The more components you have the harder it is to maintain cohesion.

Also, if you're not doing systems programing, use python or something...

* Standards - K&R
Ye olde C from a bygone era...

#+BEGIN_SRC c
void blah(void)
    int a;
{
    ...
}
#+END_SRC

K&R still has its place in history but we've come a long way since...

* Standards - C99

This is our base that's supported mostly everywhere.

... unless you do emdbed in which case... good luck?

* Standards - C11

Adds a memory model!
Adds a few quality of life features.

This is what I target.

* Undefined Behaviour - Definition

The gap between what you can do and what you're allowed to do.

Usually manifests during optimization.

Compiler assumes that something is not possible and makes optimization decisions
as a result.

* Undefined Behaviour - Linux Example

Famous Linux Kernel example...

#+BEGIN_SRC c
int blah(int *ptr)
{
   int x = *ptr;            // accessing ptr would be undefined behaviour if NULL
                            // therefore ptr can't be NULL

   if (ptr == NULL) return; // we just proved that ptr can't be NULL
                            // therefore this `if` is a noop and can be removed.

   return *ptr + 5;         // kaboom boom
}
#+END_SRC

Absolutely horrible code. Never write shit like this.

Newer versions of gcc and clang will warn on this.

Never assume consistent handling across compiler versions.

What works now, may not work in a year or when targetting a different arch.

* Undefined Behaviour - Why though?

Why not have the compiler detect it?

Many classes of undefined behaviours can only be detected at runtime.

Runtime checks are expensive.

Many have tried to specify safe C.

C is used in too many use cases where a safe subset that satisfy everyone simply
doesn't exist.

* Undefined Behaviour - Alright, I'm sad now...

Where does that leave us?

Learn your undefined behaviours and be very paranoid.

* Undefined Beahviour vs Implementation Defined Behaviour ?

Implementation defined means the compiler chooses one option and stays
consistent with its decision.

Different compilers or architecture may choose differently.

Much more rare and usually has to do with data or memory layout.

Example: struct padding

* Initialization

Single most common source of undefined behaviour:

#+BEGIN_SRC c
int a;
int b = a;
#+END_SRC

Trying to access unitialized memory is undefined behaviour.

* Initialization - what about the heap?

Also applies to heap allocations:

#+BEGIN_SRC c
int *a = malloc(sizeof(*a));
int b = *a;
#+END_SRC

malloc doesn't initialize memory so this is also undefined behaviour.

I recommend the use of calloc to initialize everything to 0.

* Initialization - safety nets

This is something that compilers can catch sometimes.

clang-tidy can also catch some instances statically.

valgrind can catch some of these dynamically.

valgrind can't catch problems in code paths not executed.

* Initialization - Lesson

Just initialize everything.

Even when it's obviously safe.

There's no way for you to know how the code will evolve.

Just be safe by default.

* Ints

One of the worst part about C...

... that C++ decided to inherit wholesale...

* Ints - Simple Question?

#+BEGIN_SRC c
sizeof(int)
#+END_SRC

What does that return?

* Ints - Complex Answer...

IT DEPENDS! Oh what joy!

int is defined as being *AT LEAST* 16 bits [3]

It will generally be 32 bit on most systems.

* Ints - Simple Question ...?

How many int types are there?

* Ints - Nevermind, I give up...

[signed|unsigned] [long] [char|short|int|long] [int]

... or kinda... who cares... it's a mess...

short
short int
signed short
signed short int

are all equivalent to

short int

* Ints - Please save me...

Screw all of that...

#+BEGIN_SRC c
#include <stddef.h>
#include <stdint.h>
#+END_SRC

These headers are your friends.

* Ints - For when you don't know what you want

#+BEGIN_SRC c
#include <stddef.h>

size_t a;
ssize_t b;
#+END_SRC

Defined in standard to be big enough to index any element in an array.

Another of saying that it's big enough to hold any memory address.

This is my default and what you want 90% of the time.

* Ints - For when you know what you want

#+BEGIN_SRC c
#include <stdint.h>

uint8_t a = UINT8_MAX;
int16_fast_t b = INT16_FAST_MAX;
#+END_SRC

Allows you to better declare your exact requirements from the int and have
explicit bounds.

* Ints - char can't be complex... right?

char is just a int type.

This means that by default it's signed.

Yes... you read that right, chars are signed by default.

* Ints - But I want to reference raw bytes...

To express the notion of a byte you can do:

#+BEGIN_SRC c
unsigned char x;
#+END_SRC

But semantically that's insane...

I recommend:

#+BEGIN_SRC c
uint8_t x;
#+END_SRC

They're equivalent but the later has a stronger semantic meaning.

Questions about why not void* are differed to later.

* Ints - Who knew negative numbers could be so evil

Signed ints are prone to undefined behaviours...

#+BEGIN_SRC c
int a = INT_MAX + 1;
int b = INT_MIN - 1;
int8_t a = ((int8_t) 1) << 7; // shift into sign bit
#+END_SRC

Equivalent expression for unsigned are all well defined.

As a result I tend to prefer unsigned unless I need signed expressions.

* Ints - Just in case you though you were safe...

#+BEGIN_SRC c
uint8_t a = ((uint8_t) 1) << 8;
#+END_SRC

Shifting past the length is undefined so check yours bounds.

* Ints - Surely literals are the last bastion of safety?

Literals are always ints!
This means they're signed!

#+BEGIN_SRC c
1 << 48;
#+END_SRC

This is technically undefined behariour but most compiler will catch it and tell
you to fix your shit...

* Ints - All I wanted was a number...

There are specifiers you can use to change the type of a literal:

#+BEGIN_SRC c
1U;   // unsgined
1L;   // long
1UL;  // unsigned long
1ULL; // unsigned long long (aka. 64 bits)
#+END_SRC

As a fun exercise, replace the 1 by 0xF.

* Ints - Please get me out of here...

ints in C are a minefield.

This is your basic primitive type and they're not even safe!

Well it only gets worst because of...

* Strings - Here we go again

The second worst part of C

The source of SO many security problems

* Strings - Basics

#+BEGIN_SRC c
const char *a = "bob";
#+END_SRC

Equivalent (or close enough):

#+BEGIN_SRC c
const char a[] = {'b', 'o', 'b', 0};
#+END_SRC

That 0 at the end is the source of so much woe and misery in the world.

* Strings - str, the dysfunctional family

All these functions assumes that you have a trailing 0.

#+BEGIN_SRC c
strlen(str);
strdup(str);        // don't forget to call free...
strcmp(s1, s2);
strcpy(dst, src);
strcat(dst, src);
strtok(str, delim); // uses global state ?!
sprintf(str, format, ...);
vsprintf(src, format, args);
#+END_SRC

If it's missing? It'll just keep reading memory until it finds one. Or else...

* Strings - Security!

What's that? Your string is on the stack?

It would be a shame if someone were to write a very specific number in your
return address for your function...


Oh no... Is your string on the heap?

It would be a shame if someone wrote random bytes to completely unrelated data
structures that you'll only find out way after the str function finishes...

* Strings - strn, the slightly ok family

**ALWAYS** default to the strn family

#+BEGIN_SRC c
strnlen(str, len);
strndup(str, len);        // don't forget to call free...
strncmp(s1, s2, len);
strncpy(dst, src, len);
strncat(dst, src, len);
snprintf(str, len, format, ...);
vsnprintf(src, len, format, args);
#+END_SRC

strn variants ensure that no more then len bytes will be read.

Get in the habit of using them even if obviously correct otherwise.

Don't be that guy...

* Strings - ALWAYS! Except...

Warning: If there is no null byte among the first n bytes of src, the string
placed in dest will not be null-terminated.

If the length of src is less than n, strncpy() writes additional null bytes to
dest to ensure that a total of n bytes are written.

-- man strncpy

* Strings - WHY?!

WHY?!

* Strings - BSD? Care to chime in?

Third time's the charm...?

#+BEGIN_SRC c
strlcpy(dst, src, len);
#+END_SRC

You need to compile with -lbsd and make you have libbsd installed.

* Strings - Hey! What about strtok?

urg... you had to remember...

#+BEGIN_SRC c
strtok_r(str, delim, saveptr);
#+END_SRC

_r means that the function is reentrant.

You know you fucked up when you have to specify that for a string function.

saveptr is the state that is used in between calls.

* Strings - TODO int conversion functions

* Strings - Paranoia is not paranoia when it's justified

The C standard library is insane and out to get you.

Period. No questions. That's just the reality.

NEVER EVER use a function from the standard lib without having read its manpage
first.

I still regurlarly recheck man pages for basic functions like strnlen.

Just to be sure...

* Arrays - Let's play with bytes

The humble array:

#+BEGIN_SRC c
size_t array[5] = {0};
#+END_SRC

* Arrays - Brackets vs Pointers

The line is blurry because array implicitly cast to pointers.

#+BEGIN_SRC c
size_t arr[5];

size_t x = arr[1];
size_t y = *(arr + 1);
#+END_SRC

Both lines do the same thing because C will implicitely cast arr to a pointer.
At which point pointer arithmetic takes over.

And lo, much confusion was spread throughout the kingdom. Hooray!

In practice, FOR UNIDIMENTIONAL ARRAYS, you can use either.

* Arrays - Where do they live?

#+BEGIN_SRC c
static size_t arr[5];
#+END_SRC

When declared outside of a function they live in special pre-allocated segments
of memory. Read up on linkers if you're really bored.

#+BEGIN_SRC c
void foo(void)
{
    size_t arr[5];
}
#+END_SRC

When delcared in a function, they live on the stack.

* Arrays - Wait-a-minute...

C stacks are usually 2Mb and there are no safety nets so...

#+BEGIN_SRC c
size_t arr[1ULL << 48];
#+END_SRC

Who wants an alternative addressing system based on the arbitrary location of
your function stack pointer? I do!

Although you're most likely to get an angry compiler or a face full of
segfaults.

* Arrays - What about dynamic sizes?

I you want to be all fancy and have dynamic sizes

#+BEGIN_SRC c
void bob(size_t len)
{
    size_t *arr = alloca(10 * sizeof(*arr));
}
#+END_SRC

alloca actually just increments the stack pointer and then returns it.

alloca also doesn't initialize the memory so you gotta do that yourself.

Calling free on this pointer result in hilarity...

For me...

Watching you suffer...

* Arrays - Surely we have better?

Why yes title! C11 deprecated alloca in favour of

#+BEGIN_SRC c
void bob(size_t len)
{
    size_t arr[len] = {0};
}
#+END_SRC

Such Clean. Much Wow.

* Arrays - How about the heap?

For heap allocations

#+BEGIN_SRC c
size_t *arr = calloc(10, sizeof(*arr));
#+END_SRC

That's one pointer you do want to free.

There's a few more things going on here but I have a whole section on pointers
so be patient.

* Arrays - So what about this bound checking thing?

Arrays are just as vulnerable as strings to bounds check problems

No nil byte shenanigans here so people tend to pass sizes around much more.

* Arrays - Function Parameters

#+BEGIN_SRC c
void bob(size_t *arr, size_t len);

size_t arr[10];
bob(arr, sizeof(arr) / sizeof(*arr));
#+END_SRC

Every array parameter should be paired with a length parameter.

That length parameter should also be checked religiously.

Do it always as a defense in depth mechanism.

Never leave home without your tin foil hat.

* Arrays - Speaking of functions

#+BEGIN_SRC c
memset(ptr, byte, len);
memcmp(s1, s2, len);
memcpy(dst, src, len);
memmove(dst, src, len);
#+END_SRC

These are all surprisingly sane and work as expected.

A true novelty for C standard libraries.

In fact, I don't trust it...

Something must be wrong...

* Arrays - memmove vs memcpy

Turns out there's one catch...

memcpy: dst and src may NOT overlap
memmove: dst and src may overlap

There are performance implications before of this.

Generally you'll use memcpy even if it's not safe by default.

99.9% of your use case won't deal with overlapping memory.

* Arrays - While we're at it...

The actual declaration for memset is

#+BEGIN_SRC c
void *memset(void *s, int c, size_t n);
#+END_SRC

See where int is the type of the second parameter?

Only the least-significant 8 bits will be read and used.

Even the man page calls it a byte... but it's an int...

Why?

Because. Now stop asking questions that make sense.

* Arrays - What about Multi-Dimentions?!

What about them...

* Arrays - I want to use them?!

urg... why...?

* Arrays - MATH!

FINE!

* Arrays - Sweet sweet victory

They're an all around pain to use.

I would probably need another 10 slides to go over them.

Instead I decided to have a fun dialogue with myself in front of 20 people.

Reality is that for systems programming, I never use them.

As a result I don't have as much experience or opinions about them.

And that's where we'll leave it at.

* Pointers - the FUN part of C
Access the raw pointers is one of the main and best reasons to use C.

It's also the easiest way to foot-gun yourself.

* Pointers - Memory Casting
#+BEGIN_SRC c
void * mem = mmap(NULL, len, prot, flags, fd, 0);
assert(mem != MAP_FAILED);

struct header *hdr = mem;
hdr->...
#+END_SRC

C allows you take to determine what the type of random pieces of memory are.

Quite handy when manipulating files, IPC mechanisms, network packets, etc.

WARNING: struct layouts are implmentation defined so use with care.
There are ways around that using compiler instrinsict

* Pointers - Pointer Arithmetic

#+BEGIN_SRC c
void * mem = something();
((uint64_t *) mem) + 2;
((struct bob *) mem) + 3;
#+END_SRC

Is equivalent to:

#+BEGIN_SRC c
void * mem = something();
(uint64_t *) (((uintptr_t) mem) + (sizeof(uint64_t) * 2));
(struct bob *) (((uintptr_t) mem) + (sizeof(struct bob) * 3));
#+END_SRC

* Pointers - Surprise quiz!
#+BEGIN_SRC c
void *mem = something();
mem + 1;
#+END_SRC

What does that do?

* Pointers - Hint
Boils down to what does this return:

#+BEGIN_SRC c
sizeof(void);
#+END_SRC

* Pointers - Answer...

Standard says that void doesn't have a size
So arithmetic on void pointers is undefined behaviour...

* Pointers - lulz jk

It's so common in practice that gcc and friends all do the following:x

#+BEGIN_SRC c
sizeof(void) = 1;
#+END_SRC

It's usually used to index raw binary data so this behaviour makes sense.

* Pointers - Personal Preference

I personally always use uint8_t to refer to binary data

#+BEGIN_SRC c
void *mem = something();
((uint8_t *)mem) + 0xb0b;
#+END_SRC

void pointers are used in a great many different context
I prefer to make it explicit when working with binary data

* Pointers - void pointers

Speaking of which, casting to and from void pointers is implicit.

#+BEGIN_SRC c
size_t* mem = (size_t *) calloc(1, sizeof(*mem));
#+END_SRC

That cast is a waste of everybody's time and a easy way to introduce errors.

This works just fine and clearer and more concise:

#+BEGIN_SRC c
size_t* mem = calloc(1, sizeof(*mem));
#+END_SRC

* Pointers - const

#+BEGIN_SRC c
const size_t * const mem = something();
#+END_SRC

I'll let you enjoy that one for a sec...

* Pointers - Pointer is const

#+BEGIN_SRC c
const size_t * mem = something();

*mem = 10; // BAD
mem = something_else(); // OK
#+END_SRC

The trick to remember is that the const is with the type of the pointer
Meaning that you're pointing to a const type

Not a very good trick but it works for me so you can complain to someone else

* Pointers - Pointee is const

#+BEGIN_SRC c
size_t * const mem = something();

*mem = 10; // OK
mem = something_else(); // BAD
#+END_SRC

The trick to remember is that the const is on the variable name
Meaning that the variable itself is const

* Pointers - Turns out it doesn't really matter...

#+BEGIN_SRC c
const size_t * mem = something();
*((size_t *) mem) = 10;
#+END_SRC

Remember how C allows you to cast whatever memory to be whatever?

Yeah so you can technically cast away const-ness.

So... yeah... Compiler need to assume that unless it can prove that something is
const, it isn't really.

* Pointers - Aliasing

The easiest way for a language to gain a performance edge over C.

If the compiler can't trace the source of your pointers,
then it has to assume that they could be aliases

In other words, that they could point to the same data or overlapping data sets.

This SEVERELY limits compilers in what they can and can't do.

* Pointers - Aliasing Troubles
#+BEGIN_SRC c
size_t foo(size_t *x, size_t *y)
{
  size_t a = *x; // read value of x once
  *y = a * 2; // if x == y then we're writing to x
  return *x;  // which means that we must read x again
}
#+END_SRC

The compiler can't assume that x != y and therefore must play it safe.

In pointer heavy code this can cause performance problems.

Arrays and by extension math heavy code, suffers from this.

* Pointers - Strict-Aliasing

There's one caveat in the standard known as strict-aliasing:

Two pointers of different types can't alias

#+BEGIN_SRC c
size_t foo(size_t *x, double *y)
{
  size_t a = *x;
  *y = a * 2;    // we can assume x != y because typeof(x) != typoeof(y)
  return *x;     // which means the compiler can reuse the value of a here
}
#+END_SRC

Cool, that solves a lot of problems, right?

* Pointers - Right?! RIGHT?!?!?!?!?

... yeah ... so there's this thing called...

* Pointers - Type Punning

Type punning meanings reinterpreting the bytes of a value as something else.

#+BEGIN_SRC c
double value = -1e12;
uint64_t raw = *((uint64_t *) &value);

uint64_t sign = raw >> 63;
uint64_t mantissa = (raw >> 52) & ((1ULL << 11) - 1);
#+END_SRC

This is used in various context and breaks the strict-aliasing rules

Welcome to undefined behaviour town!

* Pointers - Historical Pun

When compiler writers (gcc) decided to strict-aliasing by default,
it caused quite a kerfuffle.

It broke ton of existing code that relied heavily on type-punning to do things.

Alot of projects, including the linux kernel, disable this feature

Proving once and for all that puns are bad.

* Pointers - So heuh, if it's usefull... how do you do it?

The language actually doesn't provide any way to type pun directly.

Most compilers do provide alternatives by either relaxing strict-aliasing rules
or by allowing it through unions:

#+BEGIN_SRC c
union utod
{
   uint64_t u;
   double d;
};

uint64_t raw = (union utod){ d = value}.u;
uint64_t sign = raw >> 63;
uint64_t mantissa = (raw >> 52) & ((1ULL << 11) - 1);
#+END_SRC

GCC has explicit allowance for this type of type punning.

* Malloc -


#+END_SRC

* Reference

[1]: https://blog.regehr.org/archives/1393
[2]: https://www.usenix.org/system/files/1311_05-08_mickens.pdf
[3]: https://en.cppreference.com/w/cpp/language/types
